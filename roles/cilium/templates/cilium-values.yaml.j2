# Cilium Helm values generated by Ansible for version {{ cilium_version }}

# Basic configuration
ipam:
  mode: {{ cilium_helm_values.ipam.mode }}
kubeProxyReplacement: {{ cilium_helm_values.kubeProxyReplacement }}
k8sServiceHost: {{ cilium_helm_values.k8sServiceHost }}
k8sServicePort: {{ cilium_helm_values.k8sServicePort }}

# CI-compatible configuration
operator:
  replicas: {{ cilium_helm_values.operator.replicas }}

# Feature flags
externalIPs:
  enabled: {{ cilium_helm_values.externalIPs.enabled }}
nodePort:
  enabled: {{ cilium_helm_values.nodePort.enabled }}
hostPort:
  enabled: {{ cilium_helm_values.hostPort.enabled }}
hostServices:
  enabled: {{ cilium_helm_values.hostServices.enabled }}

# Hubble observability
hubble:
  enabled: {{ cilium_helm_values.hubble.enabled }}
  relay:
    enabled: {{ cilium_helm_values.hubble.relay.enabled }}
  ui:
    enabled: {{ cilium_helm_values.hubble.ui.enabled }}

# CNI configuration
cni:
  # Install the CNI configuration and binary files into the filesystem.
  install: true
  # Configure chaining on top of other CNI plugins.
  chainingMode: "none"
  # Exclusive determines whether to update the CNI configuration file
  # only when the binary is installed by Cilium.
  exclusive: {{ cilium_helm_values.cni.exclusive }}

# Ingress controller
ingressController:
  enabled: {{ cilium_helm_values.ingressController.enabled }}
  loadbalancerMode: {{ cilium_helm_values.ingressController.loadbalancerMode }}
  # Default is true - the ingress controller will use dedicated frontend LB
  # If false - shared LB will be used for both ingress and service type LB
  default: true
  # Enable service type Ingress feature
  enableServiceTypeIngress: true
  ingressLBAnnotationPrefixes: 
    - io.cilium
    - cloud.google.com
    - service.beta.kubernetes.io
    - service.kubernetes.io
    - alb.ingress.kubernetes.io

# BGP configuration
bgpControlPlane:
  enabled: {{ cilium_helm_values.bgpControlPlane.enabled }}
{% if cilium_enable_bgp | bool %}
  announce:
    loadbalancerIP: {{ cilium_helm_values.bgpControlPlane.announce.loadbalancerIP }}
    podCIDR: {{ cilium_helm_values.bgpControlPlane.announce.podCIDR }}
{% endif %}

# LoadBalancer settings
loadBalancer:
  algorithm: {{ cilium_helm_values.loadBalancer.algorithm }}
  mode: {{ cilium_helm_values.loadBalancer.mode }}

# Network routing
routingMode: {{ cilium_helm_values.routingMode }}
bpf:
  masquerade: {{ cilium_helm_values.bpf.masquerade }}
tunnel: {{ cilium_helm_values.tunnel }}
autoDirectNodeRoutes: {{ cilium_helm_values.autoDirectNodeRoutes }}

# L2 announcements for LoadBalancer services when not using BGP
l2announcements:
  enabled: {{ cilium_helm_values.l2announcements.enabled }}

# IPv4 native routing CIDR
ipv4NativeRoutingCIDR: {{ cilium_helm_values.ipv4NativeRoutingCIDR }}

# Required for Cilium 1.17.x
# This ensures CRDs are created/updated
installCRDs: true

# Enable terminating gateway if needed
# Disabled by default
terminatingGateway:
  enabled: false

# Specific settings for K3s
k8s:
  requireIPv4PodCIDR: true